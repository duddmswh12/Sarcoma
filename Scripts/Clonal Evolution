############Pyclone

conda create -n pyclone -c bioconda -c conda-forge pyclone

conda activate pyclone

PyClone run_analysis_pipeline --in_files SNU-5373_input.tsv SNU-6217_input.tsv --working_dir ./WD_100000_30000   --prior total_copy_number  --num_iters 100000 --burnin 30000

#############ClonEvol

rm(list=ls())

library(clonevol)

setwd("F:/5. Pyclone/IGV_check") 

x <- read.table("clonE_Final_IGV.txt",header=T,sep = "\t")
x$P_vaf <- x$P_vaf*100
x$R_vaf <- x$R_vaf*100

x <- na.omit(x)

### shorten vaf column names as they will be
vaf.col.names <- grep('_vaf', colnames(x), value=T)
sample.names <- gsub('_vaf', '', vaf.col.names)
x[, sample.names] <- x[, vaf.col.names]

vaf.col.names <- sample.names

### prepare sample grouping

x <- x[order(x$cluster),]

clone.colors <- c('#999999',"#BA68C8","#FFEB3B","#4FC3F7","#EF5350")


#1#
pdf('box_220620_driver.pdf', width = 7, height = 7, useDingbats = F, title='')
pp <- plot.variant.clusters(x,
                            cluster.col.name = 'cluster',
                            show.cluster.size = F,
                            cluster.size.text.color = 'blue',
                            vaf.col.names = vaf.col.names,
                            vaf.limits = 100,
                            sample.title.size = 20,
                            violin = F,
                            box = F,
                            jitter = T,
                            jitter.shape = 1,
                            jitter.color = clone.colors,
                            jitter.size = 3,
                            jitter.alpha = 1,
                            jitter.center.method = 'median',
                            jitter.center.size = 1,
                            jitter.center.color = 'darkgray',
                            jitter.center.display.value = 'none',
                            highlight = 'is.driver',
                            highlight.shape = 21,
                            highlight.color = 'blue',
                            highlight.fill.color = 'green',
                            highlight.note.col.name = 'gene',
                            highlight.note.size = 2,
                            order.by.total.vaf = F)
dev.off()

#2#
plot.pairwise(x, col.names = vaf.col.names,
              out.prefix = 'variants.pairwise.plot',
              colors = clone.colors)
#3#
pdf('flow_220620_driver.pdf', width=10, height=10, useDingbats=FALSE, title='')
plot.cluster.flow(x, vaf.col.names = vaf.col.names,
                                    colors = clone.colors)
dev.off()

y = infer.clonal.models(variants = x,
                        cluster.col.name = 'cluster',
                        vaf.col.names = vaf.col.names,
                        cancer.initiation.model='monoclonal',
                        subclonal.test = 'bootstrap',
                        subclonal.test.model = 'non-parametric',
                        num.boots = 1000,
                        founding.cluster = 1,
                        cluster.center = 'mean',
                        ignore.clusters = NULL,
                        clone.colors = clone.colors,
                        min.cluster.vaf = NULL,
                        # min probability that CCF(clone) is non-negative
                        sum.p = 0.05,
                        # alpha level in confidence interval estimate for CCF(clone)
                        alpha = 0.05)


y <- transfer.events.to.consensus.trees(y,
                                        x[x$is.driver,],
                                        cluster.col.name = 'cluster',
                                        event.col.name = 'gene')

y <- convert.consensus.tree.clone.to.branch(y, branch.scale = 'sqrt')



plot.clonal.models(y,
                   # box plot parameters
                   box.plot = TRUE,
                   fancy.boxplot = TRUE,
                   fancy.variant.boxplot.highlight = 'is.driver',
                   fancy.variant.boxplot.highlight.shape = 21,
                   fancy.variant.boxplot.highlight.fill.color = 'red',
                   fancy.variant.boxplot.highlight.color = 'black',
                   fancy.variant.boxplot.highlight.note.col.name = 'gene',
                   fancy.variant.boxplot.highlight.note.color = 'blue',
                   fancy.variant.boxplot.highlight.note.size = 2,
                   fancy.variant.boxplot.jitter.alpha = 1,
                   fancy.variant.boxplot.jitter.center.color = 'grey50',
                   fancy.variant.boxplot.base_size = 12,
                   fancy.variant.boxplot.plot.margin = 1,
                   fancy.variant.boxplot.vaf.suffix = '.VAF',
                   # bell plot parameters
                   clone.shape = 'bell',
                   bell.event = TRUE,
                   bell.event.label.color = 'blue',
                   bell.event.label.angle = 60,
                   clone.time.step.scale = 1,
                   bell.curve.step = 2,
                   # node-based consensus tree parameters
                   merged.tree.plot = TRUE,
                   tree.node.label.split.character = NULL,
                   tree.node.shape = 'circle',
                   tree.node.size = 30,
                   tree.node.text.size = 0.5,
                   merged.tree.node.size.scale = 1.25,
                   merged.tree.node.text.size.scale = 2.5,
                   merged.tree.cell.frac.ci = FALSE,
                   
                   # branch-based consensus tree parameters
                   merged.tree.clone.as.branch = TRUE,
                   mtcab.event.sep.char = ',',
                   mtcab.branch.text.size = 1,
                   mtcab.branch.width = 0.1,
                   mtcab.node.size = 5.5,
                   mtcab.node.label.size = 1.5,
                   mtcab.node.text.size = 0.1,
                   
                   # cellular population parameters
                   cell.plot = TRUE,
                   num.cells = 100,
                   cell.border.size = 0.25,
                   cell.border.color = 'black',
                   clone.grouping = 'horizontal',
                   #meta-parameters
                   scale.monoclonal.cell.frac = FALSE,
                   show.score = FALSE,
                   cell.frac.ci = FALSE,
                   disable.cell.frac = FALSE,
                   
                   # output figure parameters
                   out.dir = 'output',
                   out.format = 'pdf',
                   overwrite.output = TRUE,
                   width = 20,
                   height = 10,
                   # vector of width scales for each panel from left to right
                   panel.widths = c(2,4,2,3,2))
dev.off()
